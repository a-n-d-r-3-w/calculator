@veryDarkGray: #1f1f1f;
@gridSize: 80px;

* {
  background-color: @veryDarkGray;

  font-family: 'Open Sans', sans-serif;
  font-size: 1.2em;

  // Make element widths constant, independent of padding or border
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

#calculator {
  width: (6 * @gridSize);
  height: (5 * @gridSize);
  margin: 0 auto; // to horizontally-center this element inside its parent
  position: relative; // just to make this element a "positioned" element versus a static element
}

.hasBorder {
  border: 1px solid black;
}

#display {
  .hasBorder;
  background-color: black;
  color: white;
  position: absolute; // relative to nearest positioned ancestor
  left: 0;
  top: 0;
  width: (6 * @gridSize);
  height: @gridSize;
  text-align: right;
  padding: 0.5em 0.4em;
}

.disableTextSelection {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.button {
  .disableTextSelection;
  .hasBorder;
  text-align: center;
  display: inline-block;
  width: @gridSize;
}

.grayButton {
  background-color: #dddddd;
  color: black;
  &:hover {
    background-color: #fbfbfb;
  }
  &:active {
    background-color: gray;
  }
}

.orangeButton {
  background-color: #F38630;
  color: white;
  &:hover {
    background-color: #ff9842;
  }
  &:active {
    background-color: gray;
  }
}

.smallButton {
  height: @gridSize;
  line-height: 2em; // to vertically-center the text
}

.bigButton {
  height: (4 * @gridSize);
  line-height: 9em; // to vertically-center the text
}

#clear {
  .button;
  .bigButton;
  .grayButton;
  position: absolute; // relative to nearest positioned ancestor
  left: 0;
  top: @gridSize;
}

#numberPad {
  position: absolute; // relative to nearest positioned ancestor
  left: @gridSize;
  top: @gridSize;
  width: (3 * @gridSize);
  height: (4 * @gridSize);
}

.numberPadButton {
  .button;
  .smallButton;
  .grayButton;
}

#operators {
  position: absolute; // relative to nearest positioned ancestor
  left: (4 * @gridSize);
  top: @gridSize;
  width: @gridSize;
  height: (4 * @gridSize);
}

.operatorButton {
  .button;
  .smallButton;
  .orangeButton;
}

#equals {
  .button;
  .bigButton;
  .orangeButton;
  position: absolute; // relative to nearest positioned ancestor
  left: (5 * @gridSize);
  top: @gridSize;
}